// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: document_type.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DocumentTypeService_Create_FullMethodName  = "/domain.DocumentTypeService/Create"
	DocumentTypeService_Update_FullMethodName  = "/domain.DocumentTypeService/Update"
	DocumentTypeService_FindAll_FullMethodName = "/domain.DocumentTypeService/FindAll"
)

// DocumentTypeServiceClient is the client API for DocumentTypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocumentTypeServiceClient interface {
	Create(ctx context.Context, in *DocumentType, opts ...grpc.CallOption) (*DocumentTypeResponse, error)
	Update(ctx context.Context, in *DocumentType, opts ...grpc.CallOption) (*DocumentTypeResponse, error)
	FindAll(ctx context.Context, in *DocumentTypeListRequest, opts ...grpc.CallOption) (*DocumentTypeListResponse, error)
}

type documentTypeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDocumentTypeServiceClient(cc grpc.ClientConnInterface) DocumentTypeServiceClient {
	return &documentTypeServiceClient{cc}
}

func (c *documentTypeServiceClient) Create(ctx context.Context, in *DocumentType, opts ...grpc.CallOption) (*DocumentTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DocumentTypeResponse)
	err := c.cc.Invoke(ctx, DocumentTypeService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentTypeServiceClient) Update(ctx context.Context, in *DocumentType, opts ...grpc.CallOption) (*DocumentTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DocumentTypeResponse)
	err := c.cc.Invoke(ctx, DocumentTypeService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentTypeServiceClient) FindAll(ctx context.Context, in *DocumentTypeListRequest, opts ...grpc.CallOption) (*DocumentTypeListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DocumentTypeListResponse)
	err := c.cc.Invoke(ctx, DocumentTypeService_FindAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocumentTypeServiceServer is the server API for DocumentTypeService service.
// All implementations must embed UnimplementedDocumentTypeServiceServer
// for forward compatibility.
type DocumentTypeServiceServer interface {
	Create(context.Context, *DocumentType) (*DocumentTypeResponse, error)
	Update(context.Context, *DocumentType) (*DocumentTypeResponse, error)
	FindAll(context.Context, *DocumentTypeListRequest) (*DocumentTypeListResponse, error)
	mustEmbedUnimplementedDocumentTypeServiceServer()
}

// UnimplementedDocumentTypeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDocumentTypeServiceServer struct{}

func (UnimplementedDocumentTypeServiceServer) Create(context.Context, *DocumentType) (*DocumentTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDocumentTypeServiceServer) Update(context.Context, *DocumentType) (*DocumentTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDocumentTypeServiceServer) FindAll(context.Context, *DocumentTypeListRequest) (*DocumentTypeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedDocumentTypeServiceServer) mustEmbedUnimplementedDocumentTypeServiceServer() {}
func (UnimplementedDocumentTypeServiceServer) testEmbeddedByValue()                             {}

// UnsafeDocumentTypeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocumentTypeServiceServer will
// result in compilation errors.
type UnsafeDocumentTypeServiceServer interface {
	mustEmbedUnimplementedDocumentTypeServiceServer()
}

func RegisterDocumentTypeServiceServer(s grpc.ServiceRegistrar, srv DocumentTypeServiceServer) {
	// If the following call pancis, it indicates UnimplementedDocumentTypeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DocumentTypeService_ServiceDesc, srv)
}

func _DocumentTypeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentTypeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentTypeService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentTypeServiceServer).Create(ctx, req.(*DocumentType))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentTypeService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentTypeServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentTypeService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentTypeServiceServer).Update(ctx, req.(*DocumentType))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentTypeService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentTypeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentTypeServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentTypeService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentTypeServiceServer).FindAll(ctx, req.(*DocumentTypeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DocumentTypeService_ServiceDesc is the grpc.ServiceDesc for DocumentTypeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DocumentTypeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "domain.DocumentTypeService",
	HandlerType: (*DocumentTypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _DocumentTypeService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DocumentTypeService_Update_Handler,
		},
		{
			MethodName: "FindAll",
			Handler:    _DocumentTypeService_FindAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "document_type.proto",
}
