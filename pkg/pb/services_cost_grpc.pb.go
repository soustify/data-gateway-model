// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: services_cost.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServiceCostService_Create_FullMethodName  = "/domain.ServiceCostService/Create"
	ServiceCostService_Update_FullMethodName  = "/domain.ServiceCostService/Update"
	ServiceCostService_FindAll_FullMethodName = "/domain.ServiceCostService/FindAll"
	ServiceCostService_FindOne_FullMethodName = "/domain.ServiceCostService/FindOne"
	ServiceCostService_Enabled_FullMethodName = "/domain.ServiceCostService/Enabled"
	ServiceCostService_Disable_FullMethodName = "/domain.ServiceCostService/Disable"
)

// ServiceCostServiceClient is the client API for ServiceCostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceCostServiceClient interface {
	Create(ctx context.Context, in *ServiceCostRequest, opts ...grpc.CallOption) (*ServiceCostResponse, error)
	Update(ctx context.Context, in *ServiceCostRequest, opts ...grpc.CallOption) (*ServiceCostResponse, error)
	FindAll(ctx context.Context, in *ServiceCostRequest, opts ...grpc.CallOption) (*ServiceCostListResponse, error)
	FindOne(ctx context.Context, in *ServiceCostRequest, opts ...grpc.CallOption) (*ServiceCostResponse, error)
	Enabled(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*ServiceCostResponse, error)
	Disable(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*ServiceCostResponse, error)
}

type serviceCostServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceCostServiceClient(cc grpc.ClientConnInterface) ServiceCostServiceClient {
	return &serviceCostServiceClient{cc}
}

func (c *serviceCostServiceClient) Create(ctx context.Context, in *ServiceCostRequest, opts ...grpc.CallOption) (*ServiceCostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceCostResponse)
	err := c.cc.Invoke(ctx, ServiceCostService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceCostServiceClient) Update(ctx context.Context, in *ServiceCostRequest, opts ...grpc.CallOption) (*ServiceCostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceCostResponse)
	err := c.cc.Invoke(ctx, ServiceCostService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceCostServiceClient) FindAll(ctx context.Context, in *ServiceCostRequest, opts ...grpc.CallOption) (*ServiceCostListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceCostListResponse)
	err := c.cc.Invoke(ctx, ServiceCostService_FindAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceCostServiceClient) FindOne(ctx context.Context, in *ServiceCostRequest, opts ...grpc.CallOption) (*ServiceCostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceCostResponse)
	err := c.cc.Invoke(ctx, ServiceCostService_FindOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceCostServiceClient) Enabled(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*ServiceCostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceCostResponse)
	err := c.cc.Invoke(ctx, ServiceCostService_Enabled_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceCostServiceClient) Disable(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*ServiceCostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceCostResponse)
	err := c.cc.Invoke(ctx, ServiceCostService_Disable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceCostServiceServer is the server API for ServiceCostService service.
// All implementations must embed UnimplementedServiceCostServiceServer
// for forward compatibility.
type ServiceCostServiceServer interface {
	Create(context.Context, *ServiceCostRequest) (*ServiceCostResponse, error)
	Update(context.Context, *ServiceCostRequest) (*ServiceCostResponse, error)
	FindAll(context.Context, *ServiceCostRequest) (*ServiceCostListResponse, error)
	FindOne(context.Context, *ServiceCostRequest) (*ServiceCostResponse, error)
	Enabled(context.Context, *Entity) (*ServiceCostResponse, error)
	Disable(context.Context, *Entity) (*ServiceCostResponse, error)
	mustEmbedUnimplementedServiceCostServiceServer()
}

// UnimplementedServiceCostServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceCostServiceServer struct{}

func (UnimplementedServiceCostServiceServer) Create(context.Context, *ServiceCostRequest) (*ServiceCostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedServiceCostServiceServer) Update(context.Context, *ServiceCostRequest) (*ServiceCostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedServiceCostServiceServer) FindAll(context.Context, *ServiceCostRequest) (*ServiceCostListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedServiceCostServiceServer) FindOne(context.Context, *ServiceCostRequest) (*ServiceCostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedServiceCostServiceServer) Enabled(context.Context, *Entity) (*ServiceCostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enabled not implemented")
}
func (UnimplementedServiceCostServiceServer) Disable(context.Context, *Entity) (*ServiceCostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (UnimplementedServiceCostServiceServer) mustEmbedUnimplementedServiceCostServiceServer() {}
func (UnimplementedServiceCostServiceServer) testEmbeddedByValue()                            {}

// UnsafeServiceCostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceCostServiceServer will
// result in compilation errors.
type UnsafeServiceCostServiceServer interface {
	mustEmbedUnimplementedServiceCostServiceServer()
}

func RegisterServiceCostServiceServer(s grpc.ServiceRegistrar, srv ServiceCostServiceServer) {
	// If the following call pancis, it indicates UnimplementedServiceCostServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceCostService_ServiceDesc, srv)
}

func _ServiceCostService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceCostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceCostServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceCostService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceCostServiceServer).Create(ctx, req.(*ServiceCostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceCostService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceCostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceCostServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceCostService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceCostServiceServer).Update(ctx, req.(*ServiceCostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceCostService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceCostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceCostServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceCostService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceCostServiceServer).FindAll(ctx, req.(*ServiceCostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceCostService_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceCostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceCostServiceServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceCostService_FindOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceCostServiceServer).FindOne(ctx, req.(*ServiceCostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceCostService_Enabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceCostServiceServer).Enabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceCostService_Enabled_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceCostServiceServer).Enabled(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceCostService_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceCostServiceServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceCostService_Disable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceCostServiceServer).Disable(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceCostService_ServiceDesc is the grpc.ServiceDesc for ServiceCostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceCostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "domain.ServiceCostService",
	HandlerType: (*ServiceCostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ServiceCostService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ServiceCostService_Update_Handler,
		},
		{
			MethodName: "FindAll",
			Handler:    _ServiceCostService_FindAll_Handler,
		},
		{
			MethodName: "FindOne",
			Handler:    _ServiceCostService_FindOne_Handler,
		},
		{
			MethodName: "Enabled",
			Handler:    _ServiceCostService_Enabled_Handler,
		},
		{
			MethodName: "Disable",
			Handler:    _ServiceCostService_Disable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services_cost.proto",
}
