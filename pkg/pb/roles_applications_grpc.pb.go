// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: roles_applications.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RoleApplicationService_Create_FullMethodName  = "/domain.RoleApplicationService/Create"
	RoleApplicationService_Update_FullMethodName  = "/domain.RoleApplicationService/Update"
	RoleApplicationService_FindAll_FullMethodName = "/domain.RoleApplicationService/FindAll"
)

// RoleApplicationServiceClient is the client API for RoleApplicationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleApplicationServiceClient interface {
	Create(ctx context.Context, in *RoleApplication, opts ...grpc.CallOption) (*RoleApplicationResponse, error)
	Update(ctx context.Context, in *RoleApplication, opts ...grpc.CallOption) (*RoleApplicationResponse, error)
	FindAll(ctx context.Context, in *RoleApplicationListRequest, opts ...grpc.CallOption) (*RoleApplicationListResponse, error)
}

type roleApplicationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleApplicationServiceClient(cc grpc.ClientConnInterface) RoleApplicationServiceClient {
	return &roleApplicationServiceClient{cc}
}

func (c *roleApplicationServiceClient) Create(ctx context.Context, in *RoleApplication, opts ...grpc.CallOption) (*RoleApplicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleApplicationResponse)
	err := c.cc.Invoke(ctx, RoleApplicationService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleApplicationServiceClient) Update(ctx context.Context, in *RoleApplication, opts ...grpc.CallOption) (*RoleApplicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleApplicationResponse)
	err := c.cc.Invoke(ctx, RoleApplicationService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleApplicationServiceClient) FindAll(ctx context.Context, in *RoleApplicationListRequest, opts ...grpc.CallOption) (*RoleApplicationListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleApplicationListResponse)
	err := c.cc.Invoke(ctx, RoleApplicationService_FindAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleApplicationServiceServer is the server API for RoleApplicationService service.
// All implementations must embed UnimplementedRoleApplicationServiceServer
// for forward compatibility.
type RoleApplicationServiceServer interface {
	Create(context.Context, *RoleApplication) (*RoleApplicationResponse, error)
	Update(context.Context, *RoleApplication) (*RoleApplicationResponse, error)
	FindAll(context.Context, *RoleApplicationListRequest) (*RoleApplicationListResponse, error)
	mustEmbedUnimplementedRoleApplicationServiceServer()
}

// UnimplementedRoleApplicationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoleApplicationServiceServer struct{}

func (UnimplementedRoleApplicationServiceServer) Create(context.Context, *RoleApplication) (*RoleApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRoleApplicationServiceServer) Update(context.Context, *RoleApplication) (*RoleApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRoleApplicationServiceServer) FindAll(context.Context, *RoleApplicationListRequest) (*RoleApplicationListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedRoleApplicationServiceServer) mustEmbedUnimplementedRoleApplicationServiceServer() {
}
func (UnimplementedRoleApplicationServiceServer) testEmbeddedByValue() {}

// UnsafeRoleApplicationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleApplicationServiceServer will
// result in compilation errors.
type UnsafeRoleApplicationServiceServer interface {
	mustEmbedUnimplementedRoleApplicationServiceServer()
}

func RegisterRoleApplicationServiceServer(s grpc.ServiceRegistrar, srv RoleApplicationServiceServer) {
	// If the following call pancis, it indicates UnimplementedRoleApplicationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RoleApplicationService_ServiceDesc, srv)
}

func _RoleApplicationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleApplication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleApplicationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleApplicationService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleApplicationServiceServer).Create(ctx, req.(*RoleApplication))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleApplicationService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleApplication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleApplicationServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleApplicationService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleApplicationServiceServer).Update(ctx, req.(*RoleApplication))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleApplicationService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleApplicationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleApplicationServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleApplicationService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleApplicationServiceServer).FindAll(ctx, req.(*RoleApplicationListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleApplicationService_ServiceDesc is the grpc.ServiceDesc for RoleApplicationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleApplicationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "domain.RoleApplicationService",
	HandlerType: (*RoleApplicationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _RoleApplicationService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RoleApplicationService_Update_Handler,
		},
		{
			MethodName: "FindAll",
			Handler:    _RoleApplicationService_FindAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "roles_applications.proto",
}
