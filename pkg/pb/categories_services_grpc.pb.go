// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: categories_services.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CategoriesServicesService_Create_FullMethodName  = "/domain.CategoriesServicesService/Create"
	CategoriesServicesService_Update_FullMethodName  = "/domain.CategoriesServicesService/Update"
	CategoriesServicesService_FindAll_FullMethodName = "/domain.CategoriesServicesService/FindAll"
)

// CategoriesServicesServiceClient is the client API for CategoriesServicesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoriesServicesServiceClient interface {
	Create(ctx context.Context, in *CategoriesServices, opts ...grpc.CallOption) (*CategoriesServicesResponse, error)
	Update(ctx context.Context, in *CategoriesServices, opts ...grpc.CallOption) (*CategoriesServicesResponse, error)
	FindAll(ctx context.Context, in *CategoriesServicesListRequest, opts ...grpc.CallOption) (*CategoriesServicesListResponse, error)
}

type categoriesServicesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoriesServicesServiceClient(cc grpc.ClientConnInterface) CategoriesServicesServiceClient {
	return &categoriesServicesServiceClient{cc}
}

func (c *categoriesServicesServiceClient) Create(ctx context.Context, in *CategoriesServices, opts ...grpc.CallOption) (*CategoriesServicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoriesServicesResponse)
	err := c.cc.Invoke(ctx, CategoriesServicesService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoriesServicesServiceClient) Update(ctx context.Context, in *CategoriesServices, opts ...grpc.CallOption) (*CategoriesServicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoriesServicesResponse)
	err := c.cc.Invoke(ctx, CategoriesServicesService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoriesServicesServiceClient) FindAll(ctx context.Context, in *CategoriesServicesListRequest, opts ...grpc.CallOption) (*CategoriesServicesListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoriesServicesListResponse)
	err := c.cc.Invoke(ctx, CategoriesServicesService_FindAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategoriesServicesServiceServer is the server API for CategoriesServicesService service.
// All implementations must embed UnimplementedCategoriesServicesServiceServer
// for forward compatibility.
type CategoriesServicesServiceServer interface {
	Create(context.Context, *CategoriesServices) (*CategoriesServicesResponse, error)
	Update(context.Context, *CategoriesServices) (*CategoriesServicesResponse, error)
	FindAll(context.Context, *CategoriesServicesListRequest) (*CategoriesServicesListResponse, error)
	mustEmbedUnimplementedCategoriesServicesServiceServer()
}

// UnimplementedCategoriesServicesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCategoriesServicesServiceServer struct{}

func (UnimplementedCategoriesServicesServiceServer) Create(context.Context, *CategoriesServices) (*CategoriesServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCategoriesServicesServiceServer) Update(context.Context, *CategoriesServices) (*CategoriesServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCategoriesServicesServiceServer) FindAll(context.Context, *CategoriesServicesListRequest) (*CategoriesServicesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedCategoriesServicesServiceServer) mustEmbedUnimplementedCategoriesServicesServiceServer() {
}
func (UnimplementedCategoriesServicesServiceServer) testEmbeddedByValue() {}

// UnsafeCategoriesServicesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoriesServicesServiceServer will
// result in compilation errors.
type UnsafeCategoriesServicesServiceServer interface {
	mustEmbedUnimplementedCategoriesServicesServiceServer()
}

func RegisterCategoriesServicesServiceServer(s grpc.ServiceRegistrar, srv CategoriesServicesServiceServer) {
	// If the following call pancis, it indicates UnimplementedCategoriesServicesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CategoriesServicesService_ServiceDesc, srv)
}

func _CategoriesServicesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoriesServices)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoriesServicesServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoriesServicesService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoriesServicesServiceServer).Create(ctx, req.(*CategoriesServices))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoriesServicesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoriesServices)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoriesServicesServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoriesServicesService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoriesServicesServiceServer).Update(ctx, req.(*CategoriesServices))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoriesServicesService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoriesServicesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoriesServicesServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoriesServicesService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoriesServicesServiceServer).FindAll(ctx, req.(*CategoriesServicesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CategoriesServicesService_ServiceDesc is the grpc.ServiceDesc for CategoriesServicesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CategoriesServicesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "domain.CategoriesServicesService",
	HandlerType: (*CategoriesServicesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CategoriesServicesService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CategoriesServicesService_Update_Handler,
		},
		{
			MethodName: "FindAll",
			Handler:    _CategoriesServicesService_FindAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "categories_services.proto",
}
