// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: partners_categories.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PartnerCategoryService_Create_FullMethodName  = "/domain.PartnerCategoryService/Create"
	PartnerCategoryService_Update_FullMethodName  = "/domain.PartnerCategoryService/Update"
	PartnerCategoryService_FindAll_FullMethodName = "/domain.PartnerCategoryService/FindAll"
	PartnerCategoryService_FindOne_FullMethodName = "/domain.PartnerCategoryService/FindOne"
	PartnerCategoryService_Enabled_FullMethodName = "/domain.PartnerCategoryService/Enabled"
	PartnerCategoryService_Disable_FullMethodName = "/domain.PartnerCategoryService/Disable"
)

// PartnerCategoryServiceClient is the client API for PartnerCategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartnerCategoryServiceClient interface {
	Create(ctx context.Context, in *PartnerCategoryRequest, opts ...grpc.CallOption) (*PartnerCategoryResponse, error)
	Update(ctx context.Context, in *PartnerCategoryRequest, opts ...grpc.CallOption) (*PartnerCategoryResponse, error)
	FindAll(ctx context.Context, in *PartnerCategoryRequest, opts ...grpc.CallOption) (*PartnerCategoryListResponse, error)
	FindOne(ctx context.Context, in *PartnerCategoryRequest, opts ...grpc.CallOption) (*PartnerCategoryResponse, error)
	Enabled(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*PartnerCategoryResponse, error)
	Disable(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*PartnerCategoryResponse, error)
}

type partnerCategoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartnerCategoryServiceClient(cc grpc.ClientConnInterface) PartnerCategoryServiceClient {
	return &partnerCategoryServiceClient{cc}
}

func (c *partnerCategoryServiceClient) Create(ctx context.Context, in *PartnerCategoryRequest, opts ...grpc.CallOption) (*PartnerCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PartnerCategoryResponse)
	err := c.cc.Invoke(ctx, PartnerCategoryService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerCategoryServiceClient) Update(ctx context.Context, in *PartnerCategoryRequest, opts ...grpc.CallOption) (*PartnerCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PartnerCategoryResponse)
	err := c.cc.Invoke(ctx, PartnerCategoryService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerCategoryServiceClient) FindAll(ctx context.Context, in *PartnerCategoryRequest, opts ...grpc.CallOption) (*PartnerCategoryListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PartnerCategoryListResponse)
	err := c.cc.Invoke(ctx, PartnerCategoryService_FindAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerCategoryServiceClient) FindOne(ctx context.Context, in *PartnerCategoryRequest, opts ...grpc.CallOption) (*PartnerCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PartnerCategoryResponse)
	err := c.cc.Invoke(ctx, PartnerCategoryService_FindOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerCategoryServiceClient) Enabled(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*PartnerCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PartnerCategoryResponse)
	err := c.cc.Invoke(ctx, PartnerCategoryService_Enabled_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerCategoryServiceClient) Disable(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*PartnerCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PartnerCategoryResponse)
	err := c.cc.Invoke(ctx, PartnerCategoryService_Disable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartnerCategoryServiceServer is the server API for PartnerCategoryService service.
// All implementations must embed UnimplementedPartnerCategoryServiceServer
// for forward compatibility.
type PartnerCategoryServiceServer interface {
	Create(context.Context, *PartnerCategoryRequest) (*PartnerCategoryResponse, error)
	Update(context.Context, *PartnerCategoryRequest) (*PartnerCategoryResponse, error)
	FindAll(context.Context, *PartnerCategoryRequest) (*PartnerCategoryListResponse, error)
	FindOne(context.Context, *PartnerCategoryRequest) (*PartnerCategoryResponse, error)
	Enabled(context.Context, *Entity) (*PartnerCategoryResponse, error)
	Disable(context.Context, *Entity) (*PartnerCategoryResponse, error)
	mustEmbedUnimplementedPartnerCategoryServiceServer()
}

// UnimplementedPartnerCategoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPartnerCategoryServiceServer struct{}

func (UnimplementedPartnerCategoryServiceServer) Create(context.Context, *PartnerCategoryRequest) (*PartnerCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPartnerCategoryServiceServer) Update(context.Context, *PartnerCategoryRequest) (*PartnerCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPartnerCategoryServiceServer) FindAll(context.Context, *PartnerCategoryRequest) (*PartnerCategoryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedPartnerCategoryServiceServer) FindOne(context.Context, *PartnerCategoryRequest) (*PartnerCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedPartnerCategoryServiceServer) Enabled(context.Context, *Entity) (*PartnerCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enabled not implemented")
}
func (UnimplementedPartnerCategoryServiceServer) Disable(context.Context, *Entity) (*PartnerCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (UnimplementedPartnerCategoryServiceServer) mustEmbedUnimplementedPartnerCategoryServiceServer() {
}
func (UnimplementedPartnerCategoryServiceServer) testEmbeddedByValue() {}

// UnsafePartnerCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartnerCategoryServiceServer will
// result in compilation errors.
type UnsafePartnerCategoryServiceServer interface {
	mustEmbedUnimplementedPartnerCategoryServiceServer()
}

func RegisterPartnerCategoryServiceServer(s grpc.ServiceRegistrar, srv PartnerCategoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedPartnerCategoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PartnerCategoryService_ServiceDesc, srv)
}

func _PartnerCategoryService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartnerCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerCategoryServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerCategoryService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerCategoryServiceServer).Create(ctx, req.(*PartnerCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerCategoryService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartnerCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerCategoryServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerCategoryService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerCategoryServiceServer).Update(ctx, req.(*PartnerCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerCategoryService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartnerCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerCategoryServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerCategoryService_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerCategoryServiceServer).FindAll(ctx, req.(*PartnerCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerCategoryService_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartnerCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerCategoryServiceServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerCategoryService_FindOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerCategoryServiceServer).FindOne(ctx, req.(*PartnerCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerCategoryService_Enabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerCategoryServiceServer).Enabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerCategoryService_Enabled_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerCategoryServiceServer).Enabled(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerCategoryService_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerCategoryServiceServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnerCategoryService_Disable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerCategoryServiceServer).Disable(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

// PartnerCategoryService_ServiceDesc is the grpc.ServiceDesc for PartnerCategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartnerCategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "domain.PartnerCategoryService",
	HandlerType: (*PartnerCategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PartnerCategoryService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PartnerCategoryService_Update_Handler,
		},
		{
			MethodName: "FindAll",
			Handler:    _PartnerCategoryService_FindAll_Handler,
		},
		{
			MethodName: "FindOne",
			Handler:    _PartnerCategoryService_FindOne_Handler,
		},
		{
			MethodName: "Enabled",
			Handler:    _PartnerCategoryService_Enabled_Handler,
		},
		{
			MethodName: "Disable",
			Handler:    _PartnerCategoryService_Disable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "partners_categories.proto",
}
